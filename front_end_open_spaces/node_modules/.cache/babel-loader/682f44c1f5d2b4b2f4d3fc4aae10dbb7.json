{"ast":null,"code":"var _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/components/SearchBar.js\";\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Script from 'react-load-script';\n\nconst styles = theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4\n  }\n});\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: \"\"\n    };\n\n    this.handleScriptLoad = () => {\n      // Initialize Google Autocomplete\n\n      /*global google*/\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById(\"autocomplete\")); // Avoid paying for data that you don't need by restricting the\n      // set of place fields that are returned to just the address\n      // components and formatted address\n\n      this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n      this.autocomplete.addListener(\"place_changed\", this.handlePlaceSelect);\n    };\n\n    this.handlePlaceSelect = () => {\n      // Extract City From Address Object\n      let addressObject = this.autocomplete.getPlace();\n      let address = addressObject.address_components;\n      console.log(address); // Check if address is valid\n\n      if (address) {\n        // Set State\n        this.setState({\n          city: address[0].long_name,\n          address: addressObject.formatted_address\n        });\n      }\n    };\n\n    this.handleChange = input => {\n      this.setState({\n        address: input\n      });\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(Paper, {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw&libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: classes.iconButton,\n      \"aria-label\": \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(InputBase, {\n      id: \"autocomplete\",\n      className: classes.input,\n      placeholder: \"Search Open Spaces\",\n      inputProps: {\n        'aria-label': 'search google maps'\n      },\n      onChange: e => this.handleChange(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      className: classes.iconButton,\n      \"aria-label\": \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      className: classes.divider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(IconButton, {\n      onClick: () => this.props.findParking(this.state.address),\n      color: \"primary\",\n      className: classes.iconButton,\n      \"aria-label\": \"directions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(DirectionsIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n\nSearchBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SearchBar);","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/components/SearchBar.js"],"names":["React","Paper","InputBase","Divider","IconButton","MenuIcon","SearchIcon","DirectionsIcon","PropTypes","withStyles","Script","styles","theme","root","padding","display","alignItems","width","input","marginLeft","flex","iconButton","divider","height","margin","SearchBar","Component","state","address","handleScriptLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address_components","console","log","setState","city","long_name","formatted_address","handleChange","render","classes","props","e","target","value","findParking","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAGA,MAAMC,MAAM,GAAGC,KAAK,KAAG;AACrBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,SADL;AAEJC,IAAAA,OAAO,EAAE,MAFL;AAGJC,IAAAA,UAAU,EAAE,QAHR;AAIJC,IAAAA,KAAK,EAAE;AAJH,GADe;AAOrBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,CADP;AAELC,IAAAA,IAAI,EAAE;AAFD,GAPc;AAWrBC,EAAAA,UAAU,EAAE;AACVP,IAAAA,OAAO,EAAE;AADC,GAXS;AAcrBQ,EAAAA,OAAO,EAAE;AACPL,IAAAA,KAAK,EAAE,CADA;AAEPM,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD;AAdY,CAAH,CAApB;;AAqBC,MAAMC,SAAN,SAAwBzB,KAAK,CAAC0B,SAA9B,CAAuC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD8B;;AAAA,SAItCC,gBAJsC,GAInB,MAAK;AACxB;;AACA;AACA,WAAKC,YAAL,GAAoB,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CACEC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADF,CAApB,CAHwB,CAKxB;AACA;AACA;;AACA,WAAKN,YAAL,CAAkBO,SAAlB,CAA4B,CAAC,oBAAD,EACC,mBADD,CAA5B,EARwB,CAUxB;;AACA,WAAKP,YAAL,CAAkBQ,WAAlB,CAA8B,eAA9B,EAC8B,KAAKC,iBADnC;AAED,KAjBuC;;AAAA,SAmBxCA,iBAnBwC,GAmBpB,MAAK;AAErB;AACA,UAAIC,aAAa,GAAG,KAAKV,YAAL,CAAkBW,QAAlB,EAApB;AACA,UAAIb,OAAO,GAAGY,aAAa,CAACE,kBAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ,EALqB,CAMrB;;AACA,UAAIA,OAAJ,EAAa;AACX;AACA,aAAKiB,QAAL,CACE;AACEC,UAAAA,IAAI,EAAElB,OAAO,CAAC,CAAD,CAAP,CAAWmB,SADnB;AAEEnB,UAAAA,OAAO,EAAEY,aAAa,CAACQ;AAFzB,SADF;AAMD;AACF,KAnCqC;;AAAA,SAqCrCC,YArCqC,GAqCrB/B,KAAD,IAAS;AACtB,WAAK2B,QAAL,CAAc;AAACjB,QAAAA,OAAO,EAAEV;AAAV,OAAd;AACD,KAvCoC;AAAA;;AAwCxCgC,EAAAA,MAAM,GAAE;AAAA,UACCC,OADD,GACY,KAAKC,KADjB,CACCD,OADD;AAEN,WACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEA,OAAO,CAACtC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,sGAAZ;AACE,MAAA,MAAM,EAAE,KAAKgB,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAIE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEsB,OAAO,CAAC9B,UAA/B;AAA2C,oBAAW,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,EAOE,oBAAC,SAAD;AACA,MAAA,EAAE,EAAC,cADH;AAEE,MAAA,SAAS,EAAE8B,OAAO,CAACjC,KAFrB;AAGE,MAAA,WAAW,EAAC,oBAHd;AAIE,MAAA,UAAU,EAAE;AAAE,sBAAc;AAAhB,OAJd;AAKE,MAAA,QAAQ,EAAEmC,CAAC,IAAG,KAAKJ,YAAL,CAAkBI,CAAC,CAACC,MAAF,CAASC,KAA3B,CALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAcE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEJ,OAAO,CAAC9B,UAA/B;AAA2C,oBAAW,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAdF,EAiBE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE8B,OAAO,CAAC7B,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAkBE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,MAAI,KAAK8B,KAAL,CAAWI,WAAX,CAAuB,KAAK7B,KAAL,CAAWC,OAAlC,CAAzB;AAAoE,MAAA,KAAK,EAAC,SAA1E;AAAoF,MAAA,SAAS,EAAEuB,OAAO,CAAC9B,UAAvG;AAAmH,oBAAW,YAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlBF,CADF;AAyBD;;AAnEuC;;AAsExCI,SAAS,CAACgC,SAAV,GAAsB;AACpBN,EAAAA,OAAO,EAAE3C,SAAS,CAACkD,MAAV,CAAiBC;AADN,CAAtB;AAIA,eAAelD,UAAU,CAACE,MAAD,CAAV,CAAmBc,SAAnB,CAAf","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Script from 'react-load-script';\n\n\nconst styles = theme=>({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4,\n  },\n});\n\n class SearchBar extends React.Component{\n  state = {\n    address: \"\"\n  }\n  handleScriptLoad = ()=> {\n  // Initialize Google Autocomplete\n  /*global google*/\n  this.autocomplete = new google.maps.places.Autocomplete(\n                        document.getElementById(\"autocomplete\"));\n  // Avoid paying for data that you don't need by restricting the\n  // set of place fields that are returned to just the address\n  // components and formatted address\n  this.autocomplete.setFields(['address_components',\n                               'formatted_address']);\n  // Fire Event when a suggested name is selected\n  this.autocomplete.addListener(\"place_changed\",\n                                this.handlePlaceSelect);\n}\n\nhandlePlaceSelect = ()=> {\n\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n    let address = addressObject.address_components;\n    console.log(address);\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState(\n        {\n          city: address[0].long_name,\n          address: addressObject.formatted_address,\n        }\n      );\n    }\n  }\n\n   handleChange = (input)=>{\n     this.setState({address: input})\n   }\nrender(){\n  const {classes} = this.props\n  return (\n    <Paper className={classes.root}>\n    <Script url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw&libraries=places\"\n      onLoad={this.handleScriptLoad}\n    />\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n      id=\"autocomplete\"\n        className={classes.input}\n        placeholder=\"Search Open Spaces\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n        onChange={e=> this.handleChange(e.target.value)}\n      />\n      <IconButton className={classes.iconButton} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      <Divider className={classes.divider} />\n      <IconButton onClick={()=>this.props.findParking(this.state.address)}color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\n        <DirectionsIcon />\n      </IconButton>\n    </Paper>\n  );\n\n}\n}\n\nSearchBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SearchBar)\n"]},"metadata":{},"sourceType":"module"}