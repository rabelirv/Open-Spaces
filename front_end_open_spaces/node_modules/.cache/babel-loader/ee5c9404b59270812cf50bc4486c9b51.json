{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _Constants = _interopRequireDefault(require(\"./Constants\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  _setPrototypeOf(subClass.prototype, superClass && superClass.prototype);\n\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {\n    return o.__proto__;\n  };\n\n  return _getPrototypeOf(o);\n}\n\nvar PopupStore =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  function PopupStore(props) {\n    var _this;\n\n    _classCallCheck(this, PopupStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopupStore).call(this, props));\n    _this.id = 1;\n    _this.popups = {};\n    _this.queue = [];\n    _this.active = null;\n    _this.plugins = {};\n    return _this;\n  }\n  /**\n   * Get popup ID\n   */\n\n\n  _createClass(PopupStore, [{\n    key: \"getId\",\n    value: function getId() {\n      return \"id_\".concat(this.id++);\n    }\n    /**\n     * Get active popup\n     * @returns {*}\n     */\n\n  }, {\n    key: \"activePopup\",\n    value: function activePopup() {\n      return this.popups[this.active];\n    }\n    /**\n     * Close current popup\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.active) {\n        return false;\n      }\n\n      var id = this.active;\n      this.active = null;\n      this.emit(_Constants.default.CLOSE, id);\n      this.dispatch();\n      this.value = null;\n      return id;\n    }\n    /**\n     * Dispatch next popup in queue\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch() {\n      if (this.active || this.queue.length < 1) {\n        return false;\n      }\n\n      var id = this.queue.shift();\n      /** Set active */\n\n      this.active = id;\n      this.emit(_Constants.default.SHOW, id);\n      return true;\n    }\n    /**\n     * Refresh popup position\n     * @param position\n     */\n\n  }, {\n    key: \"refreshPosition\",\n    value: function refreshPosition(position) {\n      this.emit(_Constants.default.REFRESH, position);\n    }\n    /**\n     * Clear queue\n     */\n\n  }, {\n    key: \"clearQueue\",\n    value: function clearQueue() {\n      this.queue = [];\n    }\n  }]);\n\n  _inherits(PopupStore, _EventEmitter);\n\n  return PopupStore;\n}(_events.EventEmitter);\n\nexports.default = PopupStore;","map":null,"metadata":{},"sourceType":"script"}