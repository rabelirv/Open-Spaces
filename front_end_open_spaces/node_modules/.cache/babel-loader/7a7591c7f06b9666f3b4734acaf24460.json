{"ast":null,"code":"import _objectSpread from \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js\";\nimport React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.socket = {};\n\n    this.withinRegion = (point, position, radius) => {\n      const google = window.google;\n      const to = new google.maps.LatLng(position.lat, position.lng);\n      const distance = google.maps.geometry.spherical.computeDistanceBetween;\n      const from = new google.maps.LatLng(point.lat, point.lng);\n      console.log(distance(from, to), radius);\n      return distance(from, to) <= radius;\n    };\n\n    this.addAddress = address => {\n      this.setState({\n        addresses: [...this.state.addresses, address]\n      });\n    };\n\n    this.alertUser = () => {\n      console.log(\"hit alertUSer!\");\n      Popup.create({\n        title: \"All Done!\",\n        content: \"You've arrived at your parking spot!\",\n        buttons: {\n          left: [{\n            text: \"👍\",\n            action: () => {\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.promptUser = data => {\n      let goToParkingForm = () => this.props.history.push('/parkingform');\n\n      Popup.create({\n        title: null,\n        content: \"A User is requesting a Parking Spot at \".concat(data.address, \"! Do you accept?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: 'Post Parking Spot',\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToParkingForm();\n              Popup.create({\n                title: null,\n                content: 'We are waiting for the Rentee to confirm!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Save',\n            className: 'success',\n            action: function () {\n              Popup.alert('You pressed the Save btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.confirmParkingSpot = data => {\n      let goToMap = () => this.props.history.push('/map');\n\n      let getParkingSpot = locationObject => this.props.getParkingSpot(locationObject);\n\n      console.log(\"socket\", data);\n      let socket = this.socket;\n      Popup.create({\n        title: null,\n        content: \"A Rentor has found \".concat(data.spotsNum, \" at \").concat(data.address, \", is this ok?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: \"\\uD83D\\uDE00\",\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToMap();\n              let parkingObject = {};\n              Geocode.fromAddress(data.address).then(response => {\n                const _response$results$0$g = response.results[0].geometry.location,\n                      lat = _response$results$0$g.lat,\n                      lng = _response$results$0$g.lng;\n                getParkingSpot({\n                  lat,\n                  lng\n                });\n                parkingObject.parkingSpot = {\n                  lat,\n                  lng\n                };\n                parkingObject.fromRentor = true;\n                this.setState(_objectSpread({}, this.state, {\n                  parkingSpot: [...this.state.parkingSpot, parkingObject]\n                }));\n              }, error => {\n                console.error(error);\n              });\n              Popup.create({\n                title: null,\n                content: 'Here is your parking spot, start walking towards it!',\n                buttons: {\n                  left: [{\n                    text: 'cancel',\n                    action: () => {\n                      Popup.close();\n                    }\n                  }]\n                }\n              }, true);\n            }\n          }]\n        }\n      });\n    };\n\n    this.findParking = input => {\n      Geocode.fromAddress(input).then(response => {\n        const locationObject = response.results[0].geometry.location;\n        console.log(\"locationObject\", locationObject);\n        this.addAddress(locationObject);\n        locationObject.fromRentee = true;\n        locationObject.address = input;\n        locationObject.currentLocation = this.props.currentLocation;\n        this.socket.emit('client:message', locationObject);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      addresses: [],\n      distance: \"\",\n      parkingSpots: []\n    };\n    this.socket = io(config.api).connect();\n  }\n\n  componentDidMount() {\n    this.socket.on('server:message', data => {\n      console.log(\"Server Message\", data);\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype;\n      distanceMatrix.getDistanceMatrix({\n        origins: [this.props.currentLocation],\n        destinations: [data.currentLocation],\n        travelMode: 'DRIVING',\n        unitSystem: this.props.google.maps.UnitSystem.IMPERIAL\n      }, (res, status) => {\n        if (status === \"OK\") {\n          this.setState(_objectSpread({}, this.state.addresses, {\n            distance: res.rows[0].elements[0].distance.value\n          }));\n\n          if (data.fromRentee && this.state.distance <= 8046.72) {\n            this.promptUser(data);\n          } else if (data.address !== undefined && data.fromRentor) {\n            this.confirmParkingSpot(data);\n          }\n        } else {\n          console.error(\"status:\", status);\n        }\n      });\n\n      if (data.address !== undefined && data.fromRentor) {\n        this.confirmParkingSpot(data);\n      }\n\n      if (data.parkingSpot) {\n        let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype;\n        const within = this.withinRegion(data.parkingSpot, this.props.currentLocation, this.props.radius);\n        console.log(\"within\", within);\n\n        if (within) {\n          this.alertUser();\n        } //   distanceMatrix.getDistanceMatrix({\n        //   origins: [this.props.currentLocation],\n        //   destinations: [data.parkingSpot],\n        //   travelMode: 'DRIVING',\n        //   unitSystem:this.props.google.maps.UnitSystem.IMPERIAL\n        // },(res,status)=>{\n        //     if (status === \"OK\") {\n        //       console.log(\"Distance to Parking spot\",res)\n        //       this.setState({distance:res.rows[0].elements[0].distance.value})\n        //       if (this.state.distance < 152.4000) {\n        //         this.alertUser()\n        //       }\n        //     } else {\n        //       console.error(\"status:\",status)\n        //     }\n        //   })\n\n      }\n    });\n    this.props.getSocket(this.socket);\n  }\n\n  render() {\n    console.log(window.google);\n    return React.createElement(\"div\", {\n      className: \"home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header__logo-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header__text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"heading-primary--main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Open Spaces\"), React.createElement(\"span\", {\n      className: \"heading-primary--sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Find Parking\")), React.createElement(SearchBar, {\n      findParking: this.findParking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(Home);","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js"],"names":["React","SearchBar","Geocode","io","config","Popup","withRouter","setApiKey","Home","Component","constructor","socket","withinRegion","point","position","radius","google","window","to","maps","LatLng","lat","lng","distance","geometry","spherical","computeDistanceBetween","from","console","log","addAddress","address","setState","addresses","state","alertUser","create","title","content","buttons","left","text","action","close","promptUser","data","goToParkingForm","props","history","push","className","alert","right","key","confirmParkingSpot","goToMap","getParkingSpot","locationObject","spotsNum","parkingObject","fromAddress","then","response","results","location","parkingSpot","fromRentor","error","findParking","input","fromRentee","currentLocation","emit","parkingSpots","api","connect","componentDidMount","on","distanceMatrix","DistanceMatrixService","prototype","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","res","status","rows","elements","value","undefined","within","getSocket","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGAJ,OAAO,CAACK,SAAR,CAAkB,yCAAlB;;AAEA,MAAMC,IAAN,SAAmBR,KAAK,CAACS,SAAzB,CAAkC;AAGhCC,EAAAA,WAAW,GAAE;AACX;AADW,SAFbC,MAEa,GAFJ,EAEI;;AAAA,SAgEbC,YAhEa,GAgEE,CAACC,KAAD,EAAOC,QAAP,EAAiBC,MAAjB,KAA4B;AACzC,YAAMC,MAAM,GAAGC,MAAM,CAACD,MAAtB;AACI,YAAME,EAAE,GAAG,IAAIF,MAAM,CAACG,IAAP,CAAYC,MAAhB,CAAuBN,QAAQ,CAACO,GAAhC,EAAqCP,QAAQ,CAACQ,GAA9C,CAAX;AACA,YAAMC,QAAQ,GAAGP,MAAM,CAACG,IAAP,CAAYK,QAAZ,CAAqBC,SAArB,CAA+BC,sBAAhD;AACE,YAAMC,IAAI,GAAG,IAAIX,MAAM,CAACG,IAAP,CAAYC,MAAhB,CAAuBP,KAAK,CAACQ,GAA7B,EAAkCR,KAAK,CAACS,GAAxC,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACI,IAAD,EAAMT,EAAN,CAApB,EAA+BH,MAA/B;AACA,aAAOQ,QAAQ,CAACI,IAAD,EAAOT,EAAP,CAAR,IAAsBH,MAA7B;AACH,KAvEQ;;AAAA,SAyEbe,UAzEa,GAyEAC,OAAD,IAAW;AACnB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,SAAf,EAAyBF,OAAzB;AAAZ,OAAd;AACD,KA3EU;;AAAA,SA6EXI,SA7EW,GA6EC,MAAI;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAxB,MAAAA,KAAK,CAAC+B,MAAN,CAAa;AACXC,QAAAA,KAAK,EAAC,WADK;AAEXC,QAAAA,OAAO,EAAE,sCAFE;AAGXC,QAAAA,OAAO,EAAC;AACNC,UAAAA,IAAI,EAAC,CAAC;AACJC,YAAAA,IAAI,EAAC,IADD;AAEJC,YAAAA,MAAM,EAAC,MAAI;AACTrC,cAAAA,KAAK,CAACsC,KAAN;AACD;AAJG,WAAD;AADC;AAHG,OAAb;AAaD,KA5FU;;AAAA,SA8FXC,UA9FW,GA8FGC,IAAD,IAAQ;AACnB,UAAIC,eAAe,GAAG,MAAI,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,cAAxB,CAA1B;;AACA5C,MAAAA,KAAK,CAAC+B,MAAN,CAAa;AACbC,QAAAA,KAAK,EAAE,IADM;AAEbC,QAAAA,OAAO,mDAA4CO,IAAI,CAACd,OAAjD,qBAFM;AAGbQ,QAAAA,OAAO,EAAE;AACLC,UAAAA,IAAI,EAAE,CAAC;AACHC,YAAAA,IAAI,EAAE,QADH;AAEHS,YAAAA,SAAS,EAAE,QAFR;AAGHR,YAAAA,MAAM,EAAE,YAAY;AAChBrC,cAAAA,KAAK,CAAC8C,KAAN,CAAY,4BAAZ;AAEA;;AACA9C,cAAAA,KAAK,CAACsC,KAAN;AACH;AARE,WAAD,CADD;AAWLS,UAAAA,KAAK,EAAE,CAAC;AACJX,YAAAA,IAAI,EAAE,mBADF;AAEJY,YAAAA,GAAG,EAAE,YAFD;AAGJX,YAAAA,MAAM,EAAE,YAAY;AAChB;AACA;AACAI,cAAAA,eAAe;AACfzC,cAAAA,KAAK,CAAC+B,MAAN,CAAa;AACTC,gBAAAA,KAAK,EAAE,IADE;AAETC,gBAAAA,OAAO,EAAE,2CAFA;AAGTC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAE,CAAC,QAAD,CADD;AAELY,kBAAAA,KAAK,EAAE;AAFF;AAHA,eAAb,EAOG,IAPH;AAQH;AAfG,WAAD,EAgBJ;AACCX,YAAAA,IAAI,EAAE,MADP;AAECS,YAAAA,SAAS,EAAE,SAFZ;AAGCR,YAAAA,MAAM,EAAE,YAAY;AAChBrC,cAAAA,KAAK,CAAC8C,KAAN,CAAY,0BAAZ;AAEA;;AACA9C,cAAAA,KAAK,CAACsC,KAAN;AACH;AARF,WAhBI;AAXF;AAHI,OAAb;AA0CD,KA1IU;;AAAA,SA4IXW,kBA5IW,GA4IWT,IAAD,IAAQ;AAC3B,UAAIU,OAAO,GAAG,MAAI,KAAKR,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,MAAxB,CAAlB;;AACA,UAAIO,cAAc,GAAIC,cAAD,IAAkB,KAAKV,KAAL,CAAWS,cAAX,CAA0BC,cAA1B,CAAvC;;AACA7B,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBgB,IAArB;AACA,UAAIlC,MAAM,GAAG,KAAKA,MAAlB;AACAN,MAAAA,KAAK,CAAC+B,MAAN,CAAa;AACbC,QAAAA,KAAK,EAAE,IADM;AAEbC,QAAAA,OAAO,+BAAwBO,IAAI,CAACa,QAA7B,iBAA4Cb,IAAI,CAACd,OAAjD,kBAFM;AAGbQ,QAAAA,OAAO,EAAE;AACLC,UAAAA,IAAI,EAAE,CAAC;AACHC,YAAAA,IAAI,EAAE,QADH;AAEHS,YAAAA,SAAS,EAAE,QAFR;AAGHR,YAAAA,MAAM,EAAE,YAAY;AAChBrC,cAAAA,KAAK,CAAC8C,KAAN,CAAY,4BAAZ;AAEA;;AACA9C,cAAAA,KAAK,CAACsC,KAAN;AACH;AARE,WAAD,CADD;AAWLS,UAAAA,KAAK,EAAE,CAAC;AACJX,YAAAA,IAAI,gBADA;AAEJY,YAAAA,GAAG,EAAE,YAFD;AAGJX,YAAAA,MAAM,EAAE,YAAY;AAChB;AACA;AACAa,cAAAA,OAAO;AACP,kBAAII,aAAa,GAAG,EAApB;AACAzD,cAAAA,OAAO,CAAC0D,WAAR,CAAoBf,IAAI,CAACd,OAAzB,EAAkC8B,IAAlC,CACEC,QAAQ,IAAI;AAAA,8CAINA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBvC,QAApB,CAA6BwC,QAJvB;AAAA,sBAER3C,GAFQ,yBAERA,GAFQ;AAAA,sBAGRC,GAHQ,yBAGRA,GAHQ;AAKVkC,gBAAAA,cAAc,CAAC;AAACnC,kBAAAA,GAAD;AAAMC,kBAAAA;AAAN,iBAAD,CAAd;AACAqC,gBAAAA,aAAa,CAACM,WAAd,GAA4B;AAAC5C,kBAAAA,GAAD;AAAMC,kBAAAA;AAAN,iBAA5B;AACAqC,gBAAAA,aAAa,CAACO,UAAd,GAA2B,IAA3B;AACA,qBAAKlC,QAAL,mBAAkB,KAAKE,KAAvB;AAA6B+B,kBAAAA,WAAW,EAAC,CAAC,GAAG,KAAK/B,KAAL,CAAW+B,WAAf,EAA2BN,aAA3B;AAAzC;AACD,eAVH,EAWEQ,KAAK,IAAI;AACPvC,gBAAAA,OAAO,CAACuC,KAAR,CAAcA,KAAd;AACD,eAbH;AAgBA9D,cAAAA,KAAK,CAAC+B,MAAN,CAAa;AACTC,gBAAAA,KAAK,EAAE,IADE;AAETC,gBAAAA,OAAO,EAAE,sDAFA;AAGTC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAE,CAAC;AACLC,oBAAAA,IAAI,EAAC,QADA;AAELC,oBAAAA,MAAM,EAAE,MAAI;AACVrC,sBAAAA,KAAK,CAACsC,KAAN;AACD;AAJI,mBAAD;AADD;AAHA,eAAb,EAWG,IAXH;AAYH;AApCG,WAAD;AAXF;AAHI,OAAb;AAsDD,KAvMU;;AAAA,SAyMbyB,WAzMa,GAyMEC,KAAD,IAAS;AACrBnE,MAAAA,OAAO,CAAC0D,WAAR,CAAoBS,KAApB,EAA2BR,IAA3B,CACFC,QAAQ,IAAI;AACV,cAAML,cAAc,GAAGK,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBvC,QAApB,CAA6BwC,QAApD;AACApC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6B4B,cAA7B;AACA,aAAK3B,UAAL,CAAgB2B,cAAhB;AACAA,QAAAA,cAAc,CAACa,UAAf,GAA4B,IAA5B;AACAb,QAAAA,cAAc,CAAC1B,OAAf,GAAyBsC,KAAzB;AACAZ,QAAAA,cAAc,CAACc,eAAf,GAAiC,KAAKxB,KAAL,CAAWwB,eAA5C;AACA,aAAK5D,MAAL,CAAY6D,IAAZ,CAAiB,gBAAjB,EAAmCf,cAAnC;AAED,OAVC,EAWFU,KAAK,IAAI;AACPvC,QAAAA,OAAO,CAACuC,KAAR,CAAcA,KAAd;AACD,OAbC;AAeD,KAzNY;;AAEX,SAAKjC,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAC,EADC;AAEXV,MAAAA,QAAQ,EAAC,EAFE;AAGXkD,MAAAA,YAAY,EAAC;AAHF,KAAb;AAKA,SAAK9D,MAAL,GAAcR,EAAE,CAACC,MAAM,CAACsE,GAAR,CAAF,CAAeC,OAAf,EAAd;AAED;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,SAAKjE,MAAL,CAAYkE,EAAZ,CAAe,gBAAf,EAAkChC,IAAD,IAAQ;AACvCjB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BgB,IAA7B;AACA,UAAIiC,cAAc,GAAG,KAAK/B,KAAL,CAAW/B,MAAX,CAAkBG,IAAlB,CAAuB4D,qBAAvB,CAA6CC,SAAlE;AACAF,MAAAA,cAAc,CAACG,iBAAf,CAAiC;AACnCC,QAAAA,OAAO,EAAE,CAAC,KAAKnC,KAAL,CAAWwB,eAAZ,CAD0B;AAEnCY,QAAAA,YAAY,EAAE,CAACtC,IAAI,CAAC0B,eAAN,CAFqB;AAGnCa,QAAAA,UAAU,EAAE,SAHuB;AAInCC,QAAAA,UAAU,EAAC,KAAKtC,KAAL,CAAW/B,MAAX,CAAkBG,IAAlB,CAAuBmE,UAAvB,CAAkCC;AAJV,OAAjC,EAKF,CAACC,GAAD,EAAMC,MAAN,KAAe;AACf,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAKzD,QAAL,mBAAkB,KAAKE,KAAL,CAAWD,SAA7B;AAAuCV,YAAAA,QAAQ,EAACiE,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAYC,QAAZ,CAAqB,CAArB,EAAwBpE,QAAxB,CAAiCqE;AAAjF;;AACA,cAAI/C,IAAI,CAACyB,UAAL,IAAmB,KAAKpC,KAAL,CAAWX,QAAX,IAAuB,OAA9C,EAAuD;AACrD,iBAAKqB,UAAL,CAAgBC,IAAhB;AACD,WAFD,MAEM,IAAGA,IAAI,CAACd,OAAL,KAAiB8D,SAAjB,IAA8BhD,IAAI,CAACqB,UAAtC,EAAiD;AACrD,iBAAKZ,kBAAL,CAAwBT,IAAxB;AACD;AACF,SAPD,MAOO;AACLjB,UAAAA,OAAO,CAACuC,KAAR,CAAc,SAAd,EAAwBsB,MAAxB;AACD;AACF,OAhBG;;AAkBF,UAAI5C,IAAI,CAACd,OAAL,KAAiB8D,SAAjB,IAA8BhD,IAAI,CAACqB,UAAvC,EAAmD;AACjD,aAAKZ,kBAAL,CAAwBT,IAAxB;AACD;;AACD,UAAGA,IAAI,CAACoB,WAAR,EAAoB;AAClB,YAAIa,cAAc,GAAG,KAAK/B,KAAL,CAAW/B,MAAX,CAAkBG,IAAlB,CAAuB4D,qBAAvB,CAA6CC,SAAlE;AACA,cAAMc,MAAM,GAAG,KAAKlF,YAAL,CAAkBiC,IAAI,CAACoB,WAAvB,EAAmC,KAAKlB,KAAL,CAAWwB,eAA9C,EAA8D,KAAKxB,KAAL,CAAWhC,MAAzE,CAAf;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBiE,MAArB;;AACA,YAAIA,MAAJ,EAAY;AACV,eAAK3D,SAAL;AACD,SANiB,CAOpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC;AACA,KAhDD;AAiDA,SAAKY,KAAL,CAAWgD,SAAX,CAAqB,KAAKpF,MAA1B;AACD;;AA4JHqF,EAAAA,MAAM,GAAE;AACNpE,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACD,MAAnB;AACA,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAGM;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF,EAKE,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAE,KAAKoD,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAHN,EAUM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVN,CADA,CADJ;AAgBC;;AA/O+B;;AAmPlC,eAAe9D,UAAU,CAACE,IAAD,CAAzB","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\n\n\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component{\n  socket = {};\n\n  constructor(){\n    super()\n    this.state = {\n      addresses:[],\n      distance:\"\",\n      parkingSpots:[]\n    }\n    this.socket = io(config.api).connect()\n\n  }\n\n  componentDidMount(){\n    this.socket.on('server:message', (data)=>{\n      console.log(\"Server Message\",data);\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype\n      distanceMatrix.getDistanceMatrix({\n    origins: [this.props.currentLocation],\n    destinations: [data.currentLocation],\n    travelMode: 'DRIVING',\n    unitSystem:this.props.google.maps.UnitSystem.IMPERIAL\n  },(res, status)=>{\n    if (status === \"OK\") {\n      this.setState({...this.state.addresses,distance:res.rows[0].elements[0].distance.value})\n      if (data.fromRentee && this.state.distance <= 8046.72) {\n        this.promptUser(data)\n      }else if(data.address !== undefined && data.fromRentor){\n        this.confirmParkingSpot(data)\n      }\n    } else {\n      console.error(\"status:\",status)\n    }\n  }\n  )\n    if (data.address !== undefined && data.fromRentor) {\n      this.confirmParkingSpot(data)\n    }\n    if(data.parkingSpot){\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype\n      const within = this.withinRegion(data.parkingSpot,this.props.currentLocation,this.props.radius)\n      console.log(\"within\",within);\n      if (within) {\n        this.alertUser()\n      }\n    //   distanceMatrix.getDistanceMatrix({\n    //   origins: [this.props.currentLocation],\n    //   destinations: [data.parkingSpot],\n    //   travelMode: 'DRIVING',\n    //   unitSystem:this.props.google.maps.UnitSystem.IMPERIAL\n    // },(res,status)=>{\n    //     if (status === \"OK\") {\n    //       console.log(\"Distance to Parking spot\",res)\n    //       this.setState({distance:res.rows[0].elements[0].distance.value})\n    //       if (this.state.distance < 152.4000) {\n    //         this.alertUser()\n    //       }\n    //     } else {\n    //       console.error(\"status:\",status)\n    //     }\n    //   })\n    }\n    })\n    this.props.getSocket(this.socket)\n  }\n\n  withinRegion = (point,position, radius) => {\n    const google = window.google\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          console.log(distance(from,to), radius)\n          return distance(from, to) <= radius;\n      }\n\n  addAddress =(address)=>{\n      this.setState({ addresses:[...this.state.addresses,address] })\n    }\n\n    alertUser = ()=>{\n      console.log(\"hit alertUSer!\");\n      Popup.create({\n        title:\"All Done!\",\n        content: \"You've arrived at your parking spot!\",\n        buttons:{\n          left:[{\n            text:\"👍\",\n            action:()=>{\n              Popup.close()\n            }\n          }]\n\n        }\n      })\n    }\n\n    promptUser = (data)=>{\n      let goToParkingForm = ()=>this.props.history.push('/parkingform')\n      Popup.create({\n      title: null,\n      content: `A User is requesting a Parking Spot at ${data.address}! Do you accept?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: 'Post Parking Spot',\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToParkingForm()\n                  Popup.create({\n                      title: null,\n                      content: 'We are waiting for the Rentee to confirm!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Save',\n              className: 'success',\n              action: function () {\n                  Popup.alert('You pressed the Save btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  });\n    }\n\n    confirmParkingSpot = (data)=>{\n      let goToMap = ()=>this.props.history.push('/map')\n      let getParkingSpot = (locationObject)=>this.props.getParkingSpot(locationObject)\n      console.log(\"socket\",data);\n      let socket = this.socket\n      Popup.create({\n      title: null,\n      content: `A Rentor has found ${data.spotsNum} at ${data.address}, is this ok?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: `\\uD83D\\uDE00`,\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToMap()\n                  let parkingObject = {}\n                  Geocode.fromAddress(data.address).then(\n                    response => {\n                      const {\n                        lat,\n                        lng\n                      } = response.results[0].geometry.location;\n                      getParkingSpot({lat, lng})\n                      parkingObject.parkingSpot = {lat, lng}\n                      parkingObject.fromRentor = true\n                      this.setState({...this.state,parkingSpot:[...this.state.parkingSpot,parkingObject]})\n                    },\n                    error => {\n                      console.error(error);\n                    }\n                  );\n\n                  Popup.create({\n                      title: null,\n                      content: 'Here is your parking spot, start walking towards it!',\n                      buttons: {\n                          left: [{\n                            text:'cancel',\n                            action: ()=>{\n                              Popup.close()\n                            }\n                          }]\n                      }\n                  }, true);\n              }\n          }]\n      }\n  })\n    }\n\n  findParking = (input)=>{\n    Geocode.fromAddress(input).then(\n  response => {\n    const locationObject = response.results[0].geometry.location;\n    console.log(\"locationObject\",locationObject);\n    this.addAddress(locationObject)\n    locationObject.fromRentee = true;\n    locationObject.address = input\n    locationObject.currentLocation = this.props.currentLocation\n    this.socket.emit('client:message', locationObject)\n\n  },\n  error => {\n    console.error(error);\n  }\n);\n  }\nrender(){\n  console.log(window.google)\n  return (\n      <div className=\"home-container\">\n      <header className='header'>\n            <div className=\"header__logo-box\">\n            </div>\n            <div className=\"header__text-box\">\n              <h1 className=\"heading-primary\">\n                <span className=\"heading-primary--main\">Open Spaces</span>\n                <span className=\"heading-primary--sub\">Find Parking</span>\n              </h1>\n              <SearchBar findParking={this.findParking}/>\n            </div>\n            <br/>\n            </header>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(Home);\n"]},"metadata":{},"sourceType":"module"}