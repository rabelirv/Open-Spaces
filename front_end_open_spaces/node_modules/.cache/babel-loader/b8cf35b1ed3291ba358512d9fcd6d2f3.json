{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _keymaster = _interopRequireDefault(require(\"keymaster\"));\n\nvar _Store = _interopRequireDefault(require(\"./Store\"));\n\nvar _Header = _interopRequireDefault(require(\"./Header.react\"));\n\nvar _Footer = _interopRequireDefault(require(\"./Footer.react\"));\n\nvar _Constants = _interopRequireDefault(require(\"./Constants\"));\n\nvar _Bem = require(\"./Bem\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  _setPrototypeOf(subClass.prototype, superClass && superClass.prototype);\n\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {\n    return o.__proto__;\n  };\n\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultKeyFilter = _keymaster.default.filter;\nvar Store = new _Store.default();\n\nvar handleClose = function handleClose() {\n  _keymaster.default.deleteScope('react-popup');\n\n  _keymaster.default.filter = defaultKeyFilter;\n  Store.close();\n};\n\nvar initialState = {\n  id: null,\n  title: null,\n  buttons: null,\n  content: null,\n  visible: false,\n  className: null,\n  noOverlay: false,\n  position: false,\n  closeOnOutsideClick: true,\n  onClose: function onClose() {},\n  onOpen: function onOpen() {}\n};\n\nvar Popup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _createClass(Popup, null, [{\n    key: \"addShowListener\",\n    value: function addShowListener(callback) {\n      Store.on(_Constants.default.SHOW, callback);\n    }\n  }, {\n    key: \"removeShowListener\",\n    value: function removeShowListener(callback) {\n      Store.removeListener(_Constants.default.SHOW, callback);\n    }\n  }, {\n    key: \"addCloseListener\",\n    value: function addCloseListener(callback) {\n      Store.on(_Constants.default.CLOSE, callback);\n    }\n  }, {\n    key: \"removeCloseListener\",\n    value: function removeCloseListener(callback) {\n      Store.removeListener(_Constants.default.CLOSE, callback);\n    }\n  }, {\n    key: \"register\",\n    value: function register(data) {\n      var id = Store.getId();\n      Store.popups[id] = Object.assign({}, initialState, data);\n      return id;\n    }\n  }, {\n    key: \"queue\",\n    value: function queue(id) {\n      if (!Object.prototype.hasOwnProperty.call(Store.popups, id)) {\n        return false;\n      }\n      /** Add popup to queue */\n\n\n      Store.queue.push(id);\n      /** Dispatch queue */\n\n      Store.dispatch();\n      return id;\n    }\n  }, {\n    key: \"create\",\n    value: function create(data, bringToFront) {\n      /** Register popup */\n      var id = this.register(data);\n      /** Queue popup */\n\n      if (bringToFront === true) {\n        var currentlyActive = Store.active;\n        Store.active = null;\n        this.queue(id);\n        this.queue(currentlyActive);\n        Store.dispatch();\n      } else {\n        this.queue(id);\n      }\n\n      return id;\n    }\n  }, {\n    key: \"alert\",\n    value: function alert(text, title, bringToFront) {\n      var data = {\n        title: title,\n        content: text,\n        buttons: {\n          right: ['ok']\n        }\n      };\n      return this.create(data, bringToFront);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      Store.close();\n    }\n  }, {\n    key: \"registerPlugin\",\n    value: function registerPlugin(name, callback) {\n      Store.plugins[name] = callback.bind(this);\n    }\n  }, {\n    key: \"plugins\",\n    value: function plugins() {\n      return Store.plugins;\n    }\n  }, {\n    key: \"refreshPosition\",\n    value: function refreshPosition(position) {\n      return Store.refreshPosition(position);\n    }\n  }, {\n    key: \"clearQueue\",\n    value: function clearQueue() {\n      return Store.clearQueue();\n    }\n  }]);\n\n  function Popup(props) {\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popup).call(this, props));\n    initialState.closeOnOutsideClick = _this.props.closeOnOutsideClick;\n    _this.state = initialState;\n    _this.bound = {\n      onShow: _this.onShow.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      onClose: _this.onClose.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      onRefresh: _this.onRefresh.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      containerClick: _this.containerClick.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n      handleButtonClick: _this.handleButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)))\n    };\n    _this.boxRef = null;\n    _this.defaultKeyBindings = {\n      ok: _this.props.defaultOkKey,\n      cancel: _this.props.defaultCancelKey\n    };\n    return _this;\n  }\n\n  _createClass(Popup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Store.on(_Constants.default.SHOW, this.bound.onShow);\n      Store.on(_Constants.default.CLOSE, this.bound.onClose);\n      Store.on(_Constants.default.REFRESH, this.bound.onRefresh);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.boxRef) {\n        this.boxRef.focus();\n      }\n\n      this.setPosition(this.state.position);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Store.removeListener(_Constants.default.SHOW, this.bound.onShow);\n      Store.removeListener(_Constants.default.CLOSE, this.bound.onClose);\n      Store.removeListener(_Constants.default.REFRESH, this.bound.onRefresh);\n\n      _keymaster.default.deleteScope('react-popup');\n\n      _keymaster.default.filter = defaultKeyFilter;\n    }\n    /**\n     * Refresh popup position\n     * @param position\n     * @private\n     */\n\n  }, {\n    key: \"onRefresh\",\n    value: function onRefresh(position) {\n      this.setPosition(position);\n    }\n    /**\n     * On popup close\n     * @private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      _keymaster.default.deleteScope('react-popup');\n\n      _keymaster.default.filter = defaultKeyFilter;\n      this.state.onClose(this.state.id, this.state.title);\n      this.setState(initialState);\n    }\n    /**\n     * On popup show\n     * @private\n     */\n\n  }, {\n    key: \"onShow\",\n    value: function onShow(id) {\n      var _this2 = this;\n\n      _keymaster.default.deleteScope('react-popup');\n\n      _keymaster.default.filter = function () {\n        return true;\n      };\n\n      var popup = Store.activePopup();\n\n      if (popup.buttons && !Object.prototype.hasOwnProperty.call(popup.buttons, 'left')) {\n        popup.buttons.left = [];\n      }\n\n      if (popup.buttons && !Object.prototype.hasOwnProperty.call(popup.buttons, 'right')) {\n        popup.buttons.right = [];\n      }\n\n      this.setState({\n        id: id,\n        title: popup.title,\n        content: popup.content,\n        buttons: popup.buttons,\n        visible: true,\n        className: popup.className,\n        noOverlay: popup.noOverlay,\n        position: popup.position,\n        closeOnOutsideClick: popup.closeOnOutsideClick,\n        onClose: popup.onClose,\n        onOpen: popup.onOpen\n      }, function () {\n        _keymaster.default.setScope('react-popup');\n\n        _this2.state.onOpen(_this2.state.id, _this2.state.title);\n\n        if (_this2.props.escToClose) {\n          (0, _keymaster.default)('esc', 'react-popup', _this2.handleKeyEvent.bind(_this2, 'cancel', _this2.state.id));\n        }\n\n        if (_this2.state.buttons) {\n          if (_this2.state.buttons.left.length) {\n            _this2.state.buttons.left.forEach(function (button) {\n              return _this2.bindKeyEvents(button);\n            });\n          }\n\n          if (_this2.state.buttons.right.length) {\n            _this2.state.buttons.right.forEach(function (button) {\n              return _this2.bindKeyEvents(button);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      var box = this.boxRef;\n      var boxPosition = position;\n\n      if (!box) {\n        return;\n      }\n\n      if (!boxPosition) {\n        boxPosition = this.state.position;\n      }\n\n      if (!boxPosition) {\n        box.style.opacity = 1;\n        box.style.top = null;\n        box.style.left = null;\n        box.style.margin = null;\n        return;\n      }\n\n      if (typeof boxPosition === 'function') {\n        boxPosition.call(null, box);\n        return;\n      }\n\n      box.style.top = \"\".concat(parseInt(boxPosition.y, 10), \"px\");\n      box.style.left = \"\".concat(parseInt(boxPosition.x, 10), \"px\");\n      box.style.margin = 0;\n      box.style.opacity = 1;\n    }\n    /**\n     * Handle container click\n     * @param e\n     * @private\n     */\n\n  }, {\n    key: \"containerClick\",\n    value: function containerClick() {\n      if (this.state.closeOnOutsideClick) {\n        handleClose();\n      }\n    }\n  }, {\n    key: \"bindKeyEvents\",\n    value: function bindKeyEvents(button) {\n      var code = null;\n\n      if (typeof button === 'string') {\n        code = this.defaultKeyBindings[button];\n      } else if (Object.prototype.hasOwnProperty.call(button, 'key')) {\n        code = button.key;\n      }\n\n      if (this.props.escToClose && code === 'esc') {\n        return;\n      }\n\n      if (code) {\n        (0, _keymaster.default)(code, 'react-popup', this.handleKeyEvent.bind(this, button, this.state.id));\n      }\n    }\n  }, {\n    key: \"handleKeyEvent\",\n    value: function handleKeyEvent(button, id, e) {\n      var excludeTags = ['INPUT', 'TEXTAREA', 'BUTTON'];\n\n      if (this.state.id !== id || button.key === 'enter' && excludeTags.indexOf(e.target.tagName) >= 0) {\n        return true;\n      }\n\n      if (typeof button === 'string') {\n        handleClose();\n      } else if (Object.prototype.hasOwnProperty.call(button, 'action')) {\n        this.handleButtonClick(button.action);\n      }\n\n      return false;\n    }\n    /**\n     * Handle button clicks\n     * @param action\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: \"handleButtonClick\",\n    value: function handleButtonClick(action) {\n      if (typeof action === 'function') {\n        return action.call(this, Store);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"className\",\n    value: function className(_className) {\n      return (0, _Bem.element)(_className, this.props.className);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var className = this.props.className;\n      var box = null;\n      var overlayStyle = {};\n\n      if (this.state.visible) {\n        var closeBtn = null;\n        className += \" \".concat(this.props.className, \"--visible\");\n\n        if (this.props.closeBtn) {\n          closeBtn = _react.default.createElement(\"button\", {\n            onClick: handleClose,\n            className: \"\".concat(this.props.className, \"__close\")\n          }, this.props.closeHtml);\n        }\n\n        var boxClass = this.className('box');\n\n        if (this.state.className) {\n          boxClass += \" \".concat((0, _Bem.modifier)(this.state.className, boxClass));\n        }\n\n        box = _react.default.createElement(\"article\", {\n          role: \"dialog\",\n          tabIndex: \"-1\",\n          ref: function ref(el) {\n            _this3.boxRef = el;\n          },\n          style: {\n            opacity: 0,\n            outline: 'none'\n          },\n          className: boxClass\n        }, closeBtn, _react.default.createElement(_Header.default, {\n          title: this.state.title,\n          className: this.className('box__header')\n        }), _react.default.createElement(\"div\", {\n          className: this.className('box__body')\n        }, this.state.content), _react.default.createElement(_Footer.default, {\n          className: this.className('box__footer'),\n          btnClass: this.props.btnClass,\n          buttonClick: this.bound.handleButtonClick,\n          onClose: handleClose,\n          onOk: handleClose,\n          defaultOk: this.props.defaultOk,\n          defaultCancel: this.props.defaultCancel,\n          buttons: this.state.buttons\n        }));\n      }\n\n      if (this.state.noOverlay) {\n        overlayStyle.background = 'transparent';\n      }\n\n      return _react.default.createElement(\"div\", {\n        className: className\n      }, _react.default.createElement(\"div\", {\n        role: \"presentation\",\n        onClick: this.bound.containerClick,\n        className: this.className('overlay'),\n        style: overlayStyle\n      }), box);\n    }\n  }]);\n\n  _inherits(Popup, _React$Component);\n\n  return Popup;\n}(_react.default.Component);\n\n_defineProperty(Popup, \"defaultProps\", {\n  className: 'mm-popup',\n  btnClass: 'mm-popup__btn',\n  closeBtn: true,\n  closeHtml: null,\n  defaultOk: 'Ok',\n  defaultOkKey: 'enter',\n  defaultCancel: 'Cancel',\n  defaultCancelKey: 'esc',\n  closeOnOutsideClick: true,\n  escToClose: true,\n  onClose: function onClose() {},\n  onOpen: function onOpen() {}\n});\n\nPopup.propTypes = {\n  className: _propTypes.default.string,\n  btnClass: _propTypes.default.string,\n  closeBtn: _propTypes.default.bool,\n  closeHtml: _propTypes.default.node,\n  defaultOk: _propTypes.default.string,\n  defaultOkKey: _propTypes.default.string,\n  defaultCancel: _propTypes.default.string,\n  defaultCancelKey: _propTypes.default.string,\n  closeOnOutsideClick: _propTypes.default.bool,\n  escToClose: _propTypes.default.bool,\n  onClose: _propTypes.default.func,\n  onOpen: _propTypes.default.func\n};\nvar _default = Popup;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}