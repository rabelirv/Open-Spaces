{"ast":null,"code":"var _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/components/CurrentLocation.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nclass CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.recenterMap = () => {\n      const map = this.map;\n      const current = this.state.currentLocation;\n      const google = this.props.google;\n      const maps = google.maps;\n\n      if (map) {\n        let center = new maps.LatLng(current.lat, current.lng);\n        map.panTo(center);\n      }\n    };\n\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.grabRecenter(this.recenterMap);\n\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n        this.props.getCurrentLocation(this.state.currentLocation);\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.currentLocation);\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\n\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/components/CurrentLocation.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","recenterMap","current","state","currentLocation","google","maps","center","LatLng","lat","lng","panTo","initialCenter","componentDidMount","grabRecenter","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","getCurrentLocation","loadMap","componentDidUpdate","prevProps","prevState","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","console","log","style","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n}\n\nclass CurrentLocation extends React.Component {\n  constructor(props){\n    super(props);\n    const {lat, lng} = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng:lng\n      }\n    }\n  }\n  componentDidMount() {\n    this.props.grabRecenter(this.recenterMap)\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n        this.props.getCurrentLocation(this.state.currentLocation)\n      }\n    }\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap = () =>{\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.currentLocation);\n     const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n}\n"]},"metadata":{},"sourceType":"module"}