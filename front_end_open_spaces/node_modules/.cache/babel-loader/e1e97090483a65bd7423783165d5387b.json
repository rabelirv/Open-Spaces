{"ast":null,"code":"var _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js\";\nimport React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.socket = {};\n\n    this.addAddress = address => {\n      this.setState({\n        addresses: [...this.state.addresses, address]\n      });\n    };\n\n    this.promptUser = data => {\n      let goToParkingForm = () => this.props.history.push('/parkingform');\n\n      Popup.create({\n        title: null,\n        content: \"A User is requesting a Parking Spot at \".concat(data.address, \"! Do you accept?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: 'Post Parking Spot',\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToParkingForm();\n              Popup.create({\n                title: null,\n                content: 'We are waiting for the Rentee to confirm!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Save',\n            className: 'success',\n            action: function () {\n              Popup.alert('You pressed the Save btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.confirmParkingSpot = data => {\n      let goToMap = () => this.props.history.push('/map');\n\n      let getParkingSpot = locationObject => this.props.getParkingSpot(locationObject);\n\n      Popup.create({\n        title: null,\n        content: \"A Rentor has found \".concat(data.spotsNum, \" at \").concat(data.address, \", is this ok?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: \"\\uD83D\\uDE00\",\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToMap();\n              Geocode.fromAddress(data.address).then(response => {\n                const _response$results$0$g = response.results[0].geometry.location,\n                      lat = _response$results$0$g.lat,\n                      lng = _response$results$0$g.lng;\n                getParkingSpot({\n                  lat,\n                  lng\n                });\n              }, error => {\n                console.error(error);\n              });\n              Popup.create({\n                title: null,\n                content: 'Here is your parking spot!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Done',\n            className: 'success',\n            action: function () {\n              Popup.alert('Done');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.findParking = input => {\n      Geocode.fromAddress(input).then(response => {\n        const locationObject = response.results[0].geometry.location;\n        console.log(\"locationObject\", locationObject);\n        this.addAddress(locationObject);\n        locationObject.fromRentee = true;\n        locationObject.address = input;\n        locationObject.currentLocation = {\n          lat: 40.7505,\n          lng: 73.9934\n        };\n        this.socket.emit('client:message', locationObject);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      addresses: [],\n      distance: \"\"\n    };\n    this.socket = io(config.api).connect();\n    this.socket.on('server:message', data => {\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype;\n      distanceMatrix.getDistanceMatrix({\n        origins: [this.props.currentLocation],\n        destinations: [data.currentLocation],\n        travelMode: 'DRIVING',\n        unitSystem: this.props.google.maps.UnitSystem.IMPERIAL\n      }, (res, status) => console.log(res, res.rows[0].elements[0].distance.text));\n\n      if (data.fromRentee) {\n        this.promptUser(data);\n      } else if (data.address !== undefined && data.fromRentor) {\n        this.confirmParkingSpot(data);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.getSocket(this.socket);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header__logo-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header__text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"heading-primary--main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Open Spaces\"), React.createElement(\"span\", {\n      className: \"heading-primary--sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Find Parking\")), React.createElement(SearchBar, {\n      findParking: this.findParking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(Home);","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js"],"names":["React","SearchBar","Geocode","io","config","Popup","withRouter","setApiKey","Home","Component","constructor","socket","addAddress","address","setState","addresses","state","promptUser","data","goToParkingForm","props","history","push","create","title","content","buttons","left","text","className","action","alert","close","right","key","confirmParkingSpot","goToMap","getParkingSpot","locationObject","spotsNum","fromAddress","then","response","results","geometry","location","lat","lng","error","console","findParking","input","log","fromRentee","currentLocation","emit","distance","api","connect","on","distanceMatrix","google","maps","DistanceMatrixService","prototype","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","res","status","rows","elements","undefined","fromRentor","componentDidMount","getSocket","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\n\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component{\n  socket = {};\n\n  constructor(){\n    super()\n    this.state = {\n      addresses:[],\n      distance:\"\"\n    }\n    this.socket = io(config.api).connect()\n    this.socket.on('server:message', (data)=>{\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype\n      distanceMatrix.getDistanceMatrix({\n    origins: [this.props.currentLocation],\n    destinations: [data.currentLocation],\n    travelMode: 'DRIVING',\n    unitSystem:this.props.google.maps.UnitSystem.IMPERIAL\n  },(res, status)=>console.log(res,res.rows[0].elements[0].distance.text))\n      if (data.fromRentee) {\n        this.promptUser(data)\n      }else if(data.address !== undefined && data.fromRentor){\n        this.confirmParkingSpot(data)\n      }\n    })\n  }\n\n  componentDidMount(){\n\n    this.props.getSocket(this.socket)\n  }\n\n  addAddress =(address)=>{\n      this.setState({ addresses:[...this.state.addresses,address] })\n    }\n\n    promptUser = (data)=>{\n      let goToParkingForm = ()=>this.props.history.push('/parkingform')\n      Popup.create({\n      title: null,\n      content: `A User is requesting a Parking Spot at ${data.address}! Do you accept?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: 'Post Parking Spot',\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToParkingForm()\n                  Popup.create({\n                      title: null,\n                      content: 'We are waiting for the Rentee to confirm!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Save',\n              className: 'success',\n              action: function () {\n                  Popup.alert('You pressed the Save btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  });\n    }\n\n    confirmParkingSpot = (data)=>{\n      let goToMap = ()=>this.props.history.push('/map')\n      let getParkingSpot = (locationObject)=>this.props.getParkingSpot(locationObject)\n      Popup.create({\n      title: null,\n      content: `A Rentor has found ${data.spotsNum} at ${data.address}, is this ok?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: `\\uD83D\\uDE00`,\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToMap()\n                  Geocode.fromAddress(data.address).then(\n                    response => {\n                      const {\n                        lat,\n                        lng\n                      } = response.results[0].geometry.location;\n                      getParkingSpot({lat, lng})\n                    },\n                    error => {\n                      console.error(error);\n                    }\n                  );\n\n                  Popup.create({\n                      title: null,\n                      content: 'Here is your parking spot!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Done',\n              className: 'success',\n              action: function () {\n                  Popup.alert('Done');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  })\n    }\n\n  findParking = (input)=>{\n    Geocode.fromAddress(input).then(\n  response => {\n    const locationObject = response.results[0].geometry.location;\n    console.log(\"locationObject\",locationObject);\n    this.addAddress(locationObject)\n    locationObject.fromRentee = true;\n    locationObject.address = input\n    locationObject.currentLocation = {lat:40.7505, lng:73.9934}\n    this.socket.emit('client:message', locationObject)\n\n  },\n  error => {\n    console.error(error);\n  }\n);\n  }\nrender(){\n  return (\n      <div className=\"home-container\">\n      <header className='header'>\n            <div className=\"header__logo-box\">\n            </div>\n            <div className=\"header__text-box\">\n              <h1 className=\"heading-primary\">\n                <span className=\"heading-primary--main\">Open Spaces</span>\n                <span className=\"heading-primary--sub\">Find Parking</span>\n              </h1>\n              <SearchBar findParking={this.findParking}/>\n            </div>\n            <br/>\n            </header>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(Home);\n"]},"metadata":{},"sourceType":"module"}