{"ast":null,"code":"var _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js\";\nimport React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.socket = {};\n\n    this.addAddress = address => {\n      this.setState({\n        addresses: [...this.state.addresses, address]\n      });\n    };\n\n    this.promptUser = data => {\n      console.log(\"Inside promptuser\", data);\n\n      let goToParkingForm = () => this.props.history.push('/parkingform');\n\n      Popup.create({\n        title: null,\n        content: \"A User is requesting a Parking Spot at \".concat(data.address, \"! Do you accept?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: 'Post Parking Spot',\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToParkingForm();\n              Popup.create({\n                title: null,\n                content: 'We are waiting for the Rentee to confirm!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Save',\n            className: 'success',\n            action: function () {\n              Popup.alert('You pressed the Save btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.confirmParkingSpot = data => {\n      let goToMap = () => this.props.history.push('/map');\n\n      let getParkingSpot = locationObject => this.props.getParkingSpot(locationObject);\n\n      Popup.create({\n        title: null,\n        content: \"A Rentor has found \".concat(data.spotsNum, \" at \").concat(data.address, \", is this ok?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: \"\\uD83D\\uDE00\",\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToMap();\n              Geocode.fromAddress(data.address).then(response => {\n                const _response$results$0$g = response.results[0].geometry.location,\n                      lat = _response$results$0$g.lat,\n                      lng = _response$results$0$g.lng;\n                getParkingSpot({\n                  lat,\n                  lng\n                });\n              }, error => {\n                console.error(error);\n              });\n              Popup.create({\n                title: null,\n                content: 'Here is your parking spot!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Done',\n            className: 'success',\n            action: function () {\n              Popup.alert('Done');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.findParking = input => {\n      console.log(\"findparkin\", this.socket);\n      Geocode.fromAddress(input).then(response => {\n        const locationObject = response.results[0].geometry.location;\n        console.log(\"locationObject\", locationObject);\n        this.addAddress(locationObject);\n        locationObject.fromRentee = true;\n        locationObject.address = input;\n        locationObject.currentLocation = this.props.currentLocation;\n        this.socket.emit('client:message', locationObject);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      addresses: []\n    };\n    this.socket = io(config.api).connect();\n    this.socket.on('server:message', data => {\n      console.log(\"server:message\", data, \"currentLocation: \".concat(this.props.currentLocation));\n      fetch(\"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=\".concat(this.props.currentLocation.lat, \",\").concat(this.props.currentLocation.lng, \"&destinations=\").concat(data.currentLocation.lat, \",\").concat(data.currentLocation.lng, \"&key=AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\")).then(res => console.log(res.json()));\n\n      if (data.fromRentee) {\n        this.promptUser(data);\n      } else if (data.address !== undefined && data.fromRentor) {\n        this.confirmParkingSpot(data);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.getSocket(this.socket);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header__logo-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header__text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"heading-primary--main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Open Spaces\"), React.createElement(\"span\", {\n      className: \"heading-primary--sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Find Parking\")), React.createElement(SearchBar, {\n      findParking: this.findParking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(Home);","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js"],"names":["React","SearchBar","Geocode","io","config","Popup","withRouter","setApiKey","Home","Component","constructor","socket","addAddress","address","setState","addresses","state","promptUser","data","console","log","goToParkingForm","props","history","push","create","title","content","buttons","left","text","className","action","alert","close","right","key","confirmParkingSpot","goToMap","getParkingSpot","locationObject","spotsNum","fromAddress","then","response","results","geometry","location","lat","lng","error","findParking","input","fromRentee","currentLocation","emit","api","connect","on","fetch","res","json","undefined","fromRentor","componentDidMount","getSocket","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\n\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component{\n  socket = {};\n\n  constructor(){\n    super()\n    this.state = {\n      addresses:[],\n    }\n    this.socket = io(config.api).connect()\n    this.socket.on('server:message', (data)=>{\n      console.log(\"server:message\",data,`currentLocation: ${this.props.currentLocation}`)\n      fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=${this.props.currentLocation.lat},${this.props.currentLocation.lng}&destinations=${data.currentLocation.lat},${data.currentLocation.lng}&key=AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw`)\n      .then(res=>console.log(res.json()))\n      if (data.fromRentee) {\n        this.promptUser(data)\n      }else if(data.address !== undefined && data.fromRentor){\n        this.confirmParkingSpot(data)\n      }\n    })\n  }\n\n  componentDidMount(){\n    this.props.getSocket(this.socket)\n  }\n\n  addAddress =(address)=>{\n      this.setState({ addresses:[...this.state.addresses,address] })\n    }\n\n    promptUser = (data)=>{\n      console.log(\"Inside promptuser\",data)\n      let goToParkingForm = ()=>this.props.history.push('/parkingform')\n      Popup.create({\n      title: null,\n      content: `A User is requesting a Parking Spot at ${data.address}! Do you accept?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: 'Post Parking Spot',\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToParkingForm()\n                  Popup.create({\n                      title: null,\n                      content: 'We are waiting for the Rentee to confirm!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Save',\n              className: 'success',\n              action: function () {\n                  Popup.alert('You pressed the Save btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  });\n    }\n\n    confirmParkingSpot = (data)=>{\n      let goToMap = ()=>this.props.history.push('/map')\n      let getParkingSpot = (locationObject)=>this.props.getParkingSpot(locationObject)\n      Popup.create({\n      title: null,\n      content: `A Rentor has found ${data.spotsNum} at ${data.address}, is this ok?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: `\\uD83D\\uDE00`,\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToMap()\n                  Geocode.fromAddress(data.address).then(\n                    response => {\n                      const {\n                        lat,\n                        lng\n                      } = response.results[0].geometry.location;\n                      getParkingSpot({lat, lng})\n                    },\n                    error => {\n                      console.error(error);\n                    }\n                  );\n\n                  Popup.create({\n                      title: null,\n                      content: 'Here is your parking spot!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Done',\n              className: 'success',\n              action: function () {\n                  Popup.alert('Done');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  })\n    }\n\n  findParking = (input)=>{\n    console.log(\"findparkin\",this.socket)\n    Geocode.fromAddress(input).then(\n  response => {\n    const locationObject = response.results[0].geometry.location;\n    console.log(\"locationObject\",locationObject);\n    this.addAddress(locationObject)\n    locationObject.fromRentee = true;\n    locationObject.address = input\n    locationObject.currentLocation = this.props.currentLocation\n    this.socket.emit('client:message', locationObject)\n\n  },\n  error => {\n    console.error(error);\n  }\n);\n  }\nrender(){\n  return (\n      <div className=\"home-container\">\n      <header className='header'>\n            <div className=\"header__logo-box\">\n            </div>\n            <div className=\"header__text-box\">\n              <h1 className=\"heading-primary\">\n                <span className=\"heading-primary--main\">Open Spaces</span>\n                <span className=\"heading-primary--sub\">Find Parking</span>\n              </h1>\n              <SearchBar findParking={this.findParking}/>\n            </div>\n            <br/>\n            </header>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(Home);\n"]},"metadata":{},"sourceType":"module"}