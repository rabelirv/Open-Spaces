{"ast":null,"code":"//     keymaster.js\n//     (c) 2011-2013 Thomas Fuchs\n//     keymaster.js may be freely distributed under the MIT license.\n;\n\n(function (global) {\n  var k,\n      _handlers = {},\n      _mods = {\n    16: false,\n    18: false,\n    17: false,\n    91: false\n  },\n      _scope = 'all',\n      // modifier keys\n  _MODIFIERS = {\n    '⇧': 16,\n    shift: 16,\n    '⌥': 18,\n    alt: 18,\n    option: 18,\n    '⌃': 17,\n    ctrl: 17,\n    control: 17,\n    '⌘': 91,\n    command: 91\n  },\n      // special keys\n  _MAP = {\n    backspace: 8,\n    tab: 9,\n    clear: 12,\n    enter: 13,\n    'return': 13,\n    esc: 27,\n    escape: 27,\n    space: 32,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    del: 46,\n    'delete': 46,\n    home: 36,\n    end: 35,\n    pageup: 33,\n    pagedown: 34,\n    ',': 188,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '-': 189,\n    '=': 187,\n    ';': 186,\n    '\\'': 222,\n    '[': 219,\n    ']': 221,\n    '\\\\': 220\n  },\n      code = function code(x) {\n    return _MAP[x] || x.toUpperCase().charCodeAt(0);\n  },\n      _downKeys = [];\n\n  for (k = 1; k < 20; k++) {\n    _MAP['f' + k] = 111 + k;\n  } // IE doesn't support Array#indexOf, so have a simple replacement\n\n\n  function index(array, item) {\n    var i = array.length;\n\n    while (i--) {\n      if (array[i] === item) return i;\n    }\n\n    return -1;\n  } // for comparing mods before unassignment\n\n\n  function compareArray(a1, a2) {\n    if (a1.length != a2.length) return false;\n\n    for (var i = 0; i < a1.length; i++) {\n      if (a1[i] !== a2[i]) return false;\n    }\n\n    return true;\n  }\n\n  var modifierMap = {\n    16: 'shiftKey',\n    18: 'altKey',\n    17: 'ctrlKey',\n    91: 'metaKey'\n  };\n\n  function updateModifierKey(event) {\n    for (k in _mods) {\n      _mods[k] = event[modifierMap[k]];\n    }\n  }\n\n  ; // handle keydown event\n\n  function dispatch(event) {\n    var key, handler, k, i, modifiersMatch, scope;\n    key = event.keyCode;\n\n    if (index(_downKeys, key) == -1) {\n      _downKeys.push(key);\n    } // if a modifier key, set the key.<modifierkeyname> property to true and return\n\n\n    if (key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko\n\n    if (key in _mods) {\n      _mods[key] = true; // 'assignKey' from inside this closure is exported to window.key\n\n      for (k in _MODIFIERS) {\n        if (_MODIFIERS[k] == key) assignKey[k] = true;\n      }\n\n      return;\n    }\n\n    updateModifierKey(event); // see if we need to ignore the keypress (filter() can can be overridden)\n    // by default ignore key presses if a select, textarea, or input is focused\n\n    if (!assignKey.filter.call(this, event)) return; // abort if no potentially matching shortcuts found\n\n    if (!(key in _handlers)) return;\n    scope = getScope(); // for each potential shortcut\n\n    for (i = 0; i < _handlers[key].length; i++) {\n      handler = _handlers[key][i]; // see if it's in the current scope\n\n      if (handler.scope == scope || handler.scope == 'all') {\n        // check if modifiers match if any\n        modifiersMatch = handler.mods.length > 0;\n\n        for (k in _mods) {\n          if (!_mods[k] && index(handler.mods, +k) > -1 || _mods[k] && index(handler.mods, +k) == -1) modifiersMatch = false;\n        } // call the handler and stop the event if neccessary\n\n\n        if (handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch) {\n          if (handler.method(event, handler) === false) {\n            if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n            if (event.stopPropagation) event.stopPropagation();\n            if (event.cancelBubble) event.cancelBubble = true;\n          }\n        }\n      }\n    }\n  }\n\n  ; // unset modifier keys on keyup\n\n  function clearModifier(event) {\n    var key = event.keyCode,\n        k,\n        i = index(_downKeys, key); // remove key from _downKeys\n\n    if (i >= 0) {\n      _downKeys.splice(i, 1);\n    }\n\n    if (key == 93 || key == 224) key = 91;\n\n    if (key in _mods) {\n      _mods[key] = false;\n\n      for (k in _MODIFIERS) {\n        if (_MODIFIERS[k] == key) assignKey[k] = false;\n      }\n    }\n  }\n\n  ;\n\n  function resetModifiers() {\n    for (k in _mods) {\n      _mods[k] = false;\n    }\n\n    for (k in _MODIFIERS) {\n      assignKey[k] = false;\n    }\n  }\n\n  ; // parse and assign shortcut\n\n  function assignKey(key, scope, method) {\n    var keys, mods;\n    keys = getKeys(key);\n\n    if (method === undefined) {\n      method = scope;\n      scope = 'all';\n    } // for each shortcut\n\n\n    for (var i = 0; i < keys.length; i++) {\n      // set modifier keys if any\n      mods = [];\n      key = keys[i].split('+');\n\n      if (key.length > 1) {\n        mods = getMods(key);\n        key = [key[key.length - 1]];\n      } // convert to keycode and...\n\n\n      key = key[0];\n      key = code(key); // ...store handler\n\n      if (!(key in _handlers)) _handlers[key] = [];\n\n      _handlers[key].push({\n        shortcut: keys[i],\n        scope: scope,\n        method: method,\n        key: keys[i],\n        mods: mods\n      });\n    }\n  }\n\n  ; // unbind all handlers for given key in current scope\n\n  function unbindKey(key, scope) {\n    var multipleKeys,\n        keys,\n        mods = [],\n        i,\n        j,\n        obj;\n    multipleKeys = getKeys(key);\n\n    for (j = 0; j < multipleKeys.length; j++) {\n      keys = multipleKeys[j].split('+');\n\n      if (keys.length > 1) {\n        mods = getMods(keys);\n        key = keys[keys.length - 1];\n      }\n\n      key = code(key);\n\n      if (scope === undefined) {\n        scope = getScope();\n      }\n\n      if (!_handlers[key]) {\n        return;\n      }\n\n      for (i = 0; i < _handlers[key].length; i++) {\n        obj = _handlers[key][i]; // only clear handlers if correct scope and mods match\n\n        if (obj.scope === scope && compareArray(obj.mods, mods)) {\n          _handlers[key][i] = {};\n        }\n      }\n    }\n  }\n\n  ; // Returns true if the key with code 'keyCode' is currently down\n  // Converts strings into key codes.\n\n  function isPressed(keyCode) {\n    if (typeof keyCode == 'string') {\n      keyCode = code(keyCode);\n    }\n\n    return index(_downKeys, keyCode) != -1;\n  }\n\n  function getPressedKeyCodes() {\n    return _downKeys.slice(0);\n  }\n\n  function filter(event) {\n    var tagName = (event.target || event.srcElement).tagName; // ignore keypressed in any elements that support keyboard data input\n\n    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\n  } // initialize key.<modifier> to false\n\n\n  for (k in _MODIFIERS) {\n    assignKey[k] = false;\n  } // set current scope (default 'all')\n\n\n  function setScope(scope) {\n    _scope = scope || 'all';\n  }\n\n  ;\n\n  function getScope() {\n    return _scope || 'all';\n  }\n\n  ; // delete all handlers for a given scope\n\n  function deleteScope(scope) {\n    var key, handlers, i;\n\n    for (key in _handlers) {\n      handlers = _handlers[key];\n\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  }\n\n  ; // abstract key logic for assign and unassign\n\n  function getKeys(key) {\n    var keys;\n    key = key.replace(/\\s/g, '');\n    keys = key.split(',');\n\n    if (keys[keys.length - 1] == '') {\n      keys[keys.length - 2] += ',';\n    }\n\n    return keys;\n  } // abstract mods logic for assign and unassign\n\n\n  function getMods(key) {\n    var mods = key.slice(0, key.length - 1);\n\n    for (var mi = 0; mi < mods.length; mi++) {\n      mods[mi] = _MODIFIERS[mods[mi]];\n    }\n\n    return mods;\n  } // cross-browser events\n\n\n  function addEvent(object, event, method) {\n    if (object.addEventListener) object.addEventListener(event, method, false);else if (object.attachEvent) object.attachEvent('on' + event, function () {\n      method(window.event);\n    });\n  }\n\n  ; // set the handlers globally on document\n\n  addEvent(document, 'keydown', function (event) {\n    dispatch(event);\n  }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48\n\n  addEvent(document, 'keyup', clearModifier); // reset modifiers to false whenever the window is (re)focused.\n\n  addEvent(window, 'focus', resetModifiers); // store previously defined key\n\n  var previousKey = global.key; // restore previously defined key and return reference to our key object\n\n  function noConflict() {\n    var k = global.key;\n    global.key = previousKey;\n    return k;\n  } // set window.key and window.key.set/get/deleteScope, and the default filter\n\n\n  global.key = assignKey;\n  global.key.setScope = setScope;\n  global.key.getScope = getScope;\n  global.key.deleteScope = deleteScope;\n  global.key.filter = filter;\n  global.key.isPressed = isPressed;\n  global.key.getPressedKeyCodes = getPressedKeyCodes;\n  global.key.noConflict = noConflict;\n  global.key.unbind = unbindKey;\n  if (typeof module !== 'undefined') module.exports = assignKey;\n})(this);","map":null,"metadata":{},"sourceType":"script"}