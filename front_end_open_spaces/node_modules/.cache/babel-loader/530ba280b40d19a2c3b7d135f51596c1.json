{"ast":null,"code":"import _objectSpread from \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js\";\nimport React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.socket = {};\n\n    this.addAddress = address => {\n      this.setState({\n        addresses: [...this.state.addresses, address]\n      });\n    };\n\n    this.alertUser = () => {\n      Popup.create({\n        title: \"All Done!\",\n        content: \"You've arrived at your parking spot!\",\n        buttons: {\n          left: [\"👍\"]\n        }\n      });\n    };\n\n    this.promptUser = data => {\n      let goToParkingForm = () => this.props.history.push('/parkingform');\n\n      Popup.create({\n        title: null,\n        content: \"A User is requesting a Parking Spot at \".concat(data.address, \"! Do you accept?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: 'Post Parking Spot',\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToParkingForm();\n              Popup.create({\n                title: null,\n                content: 'We are waiting for the Rentee to confirm!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Save',\n            className: 'success',\n            action: function () {\n              Popup.alert('You pressed the Save btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.confirmParkingSpot = data => {\n      let goToMap = () => this.props.history.push('/map');\n\n      let getParkingSpot = locationObject => this.props.getParkingSpot(locationObject);\n\n      console.log(\"socket\", this.socket);\n      let socket = this.socket;\n      Popup.create({\n        title: null,\n        content: \"A Rentor has found \".concat(data.spotsNum, \" at \").concat(data.address, \", is this ok?\"),\n        buttons: {\n          left: [{\n            text: 'Cancel',\n            className: 'danger',\n            action: function () {\n              Popup.alert('You pressed the Cancel btn');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }],\n          right: [{\n            text: \"\\uD83D\\uDE00\",\n            key: 'ctrl+enter',\n            action: function () {\n              // Passing true as the second argument to the create method\n              // displays it directly, without interupting the queue.\n              goToMap();\n              let parkingObject = {};\n              Geocode.fromAddress(data.address).then(response => {\n                const _response$results$0$g = response.results[0].geometry.location,\n                      lat = _response$results$0$g.lat,\n                      lng = _response$results$0$g.lng;\n                getParkingSpot({\n                  lat,\n                  lng\n                });\n                parkingObject.parkingSpot = {\n                  lat,\n                  lng\n                };\n                socket.emit('client:message', parkingObject);\n              }, error => {\n                console.error(error);\n              });\n              Popup.create({\n                title: null,\n                content: 'Here is your parking spot, start walking towards it!',\n                buttons: {\n                  left: ['cancel'],\n                  right: []\n                }\n              }, true);\n            }\n          }, {\n            text: 'Done',\n            className: 'success',\n            action: function () {\n              Popup.alert('Done');\n              /** Close this popup. Close will always close the current visible one, if one is visible */\n\n              Popup.close();\n            }\n          }]\n        }\n      });\n    };\n\n    this.findParking = input => {\n      Geocode.fromAddress(input).then(response => {\n        const locationObject = response.results[0].geometry.location;\n        console.log(\"locationObject\", locationObject);\n        this.addAddress(locationObject);\n        locationObject.fromRentee = true;\n        locationObject.address = input;\n        locationObject.currentLocation = this.props.currentLocation;\n        this.socket.emit('client:message', locationObject);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      addresses: [],\n      distance: \"\"\n    };\n    this.socket = io(config.api).connect();\n    this.socket.on('server:message', data => {\n      console.log(\"Server Message\", data);\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype;\n      distanceMatrix.getDistanceMatrix({\n        origins: [this.props.currentLocation],\n        destinations: [data.currentLocation],\n        travelMode: 'DRIVING',\n        unitSystem: this.props.google.maps.UnitSystem.IMPERIAL\n      }, (res, status) => {\n        if (status === \"OK\") {\n          console.log(res.rows[0].elements[0]);\n          this.setState(_objectSpread({}, this.state.addresses, {\n            distance: res.rows[0].elements[0].distance.value\n          }));\n\n          if (data.fromRentee && this.state.distance <= 8046.72) {\n            this.promptUser(data);\n          } else if (data.address !== undefined && data.fromRentor) {\n            this.confirmParkingSpot(data);\n          }\n        } else {\n          console.error(\"status:\", status);\n        }\n      });\n\n      if (data.address !== undefined && data.fromRentor) {\n        this.confirmParkingSpot(data);\n      }\n\n      if (data.parkingSpot) {\n        let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype;\n        distanceMatrix.getDistanceMatrix({}, (res, status) => {\n          if (status === \"OK\") {\n            if (res.rows[0].elements[0].distance.value < 3.048) {\n              this.alertUser();\n            }\n          } else {\n            console.error(\"status:\", status);\n          }\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.getSocket(this.socket);\n  }\n\n  render() {\n    console.log(this.state.distance);\n    return React.createElement(\"div\", {\n      className: \"home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header__logo-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header__text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"heading-primary--main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Open Spaces\"), React.createElement(\"span\", {\n      className: \"heading-primary--sub\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Find Parking\")), React.createElement(SearchBar, {\n      findParking: this.findParking,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(Home);","map":{"version":3,"sources":["/Users/irvingrabel/Documents/Projects/Open_Spaces/front_end_open_spaces/src/Home.js"],"names":["React","SearchBar","Geocode","io","config","Popup","withRouter","setApiKey","Home","Component","constructor","socket","addAddress","address","setState","addresses","state","alertUser","create","title","content","buttons","left","promptUser","data","goToParkingForm","props","history","push","text","className","action","alert","close","right","key","confirmParkingSpot","goToMap","getParkingSpot","locationObject","console","log","spotsNum","parkingObject","fromAddress","then","response","results","geometry","location","lat","lng","parkingSpot","emit","error","findParking","input","fromRentee","currentLocation","distance","api","connect","on","distanceMatrix","google","maps","DistanceMatrixService","prototype","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","res","status","rows","elements","value","undefined","fromRentor","componentDidMount","getSocket","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport SearchBar from \"./components/SearchBar\";\nimport Geocode from \"react-geocode\";\nimport io from 'socket.io-client';\nimport config from './config';\nimport Popup from 'react-popup';\nimport { withRouter } from 'react-router-dom';\n\nGeocode.setApiKey(\"AIzaSyDS7fqSLY5L2xuXAb8cIb1vyQRKt5EPXmw\");\n\nclass Home extends React.Component{\n  socket = {};\n\n  constructor(){\n    super()\n    this.state = {\n      addresses:[],\n      distance:\"\"\n    }\n    this.socket = io(config.api).connect()\n    this.socket.on('server:message', (data)=>{\n      console.log(\"Server Message\",data);\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype\n      distanceMatrix.getDistanceMatrix({\n    origins: [this.props.currentLocation],\n    destinations: [data.currentLocation],\n    travelMode: 'DRIVING',\n    unitSystem:this.props.google.maps.UnitSystem.IMPERIAL\n  },(res, status)=>{\n    if (status === \"OK\") {\n      console.log(res.rows[0].elements[0])\n      this.setState({...this.state.addresses,distance:res.rows[0].elements[0].distance.value})\n      if (data.fromRentee && this.state.distance <= 8046.72) {\n        this.promptUser(data)\n      }else if(data.address !== undefined && data.fromRentor){\n        this.confirmParkingSpot(data)\n      }\n    } else {\n      console.error(\"status:\",status)\n    }\n  }\n  )\n    if (data.address !== undefined && data.fromRentor) {\n      this.confirmParkingSpot(data)\n    }\n    if(data.parkingSpot){\n      let distanceMatrix = this.props.google.maps.DistanceMatrixService.prototype\n      distanceMatrix.getDistanceMatrix({},(res,status)=>{\n        if (status === \"OK\") {\n          if (res.rows[0].elements[0].distance.value < 3.048) {\n            this.alertUser()\n          }\n        } else {\n          console.error(\"status:\",status)\n        }\n      })\n    }\n    })\n  }\n\n  componentDidMount(){\n\n    this.props.getSocket(this.socket)\n  }\n\n  addAddress =(address)=>{\n      this.setState({ addresses:[...this.state.addresses,address] })\n    }\n\n    alertUser = ()=>{\n      Popup.create({\n        title:\"All Done!\",\n        content: \"You've arrived at your parking spot!\",\n        buttons:{\n          left:[\"👍\"]\n\n        }\n      })\n    }\n\n    promptUser = (data)=>{\n      let goToParkingForm = ()=>this.props.history.push('/parkingform')\n      Popup.create({\n      title: null,\n      content: `A User is requesting a Parking Spot at ${data.address}! Do you accept?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: 'Post Parking Spot',\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToParkingForm()\n                  Popup.create({\n                      title: null,\n                      content: 'We are waiting for the Rentee to confirm!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Save',\n              className: 'success',\n              action: function () {\n                  Popup.alert('You pressed the Save btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  });\n    }\n\n    confirmParkingSpot = (data)=>{\n      let goToMap = ()=>this.props.history.push('/map')\n      let getParkingSpot = (locationObject)=>this.props.getParkingSpot(locationObject)\n      console.log(\"socket\",this.socket);\n      let socket = this.socket\n      Popup.create({\n      title: null,\n      content: `A Rentor has found ${data.spotsNum} at ${data.address}, is this ok?`,\n      buttons: {\n          left: [{\n              text: 'Cancel',\n              className: 'danger',\n              action: function () {\n                  Popup.alert('You pressed the Cancel btn');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }],\n          right: [{\n              text: `\\uD83D\\uDE00`,\n              key: 'ctrl+enter',\n              action: function () {\n                  // Passing true as the second argument to the create method\n                  // displays it directly, without interupting the queue.\n                  goToMap()\n                  let parkingObject = {}\n                  Geocode.fromAddress(data.address).then(\n                    response => {\n                      const {\n                        lat,\n                        lng\n                      } = response.results[0].geometry.location;\n                      getParkingSpot({lat, lng})\n                      parkingObject.parkingSpot = {lat, lng}\n                      socket.emit('client:message', parkingObject)\n                    },\n                    error => {\n                      console.error(error);\n                    }\n                  );\n\n                  Popup.create({\n                      title: null,\n                      content: 'Here is your parking spot, start walking towards it!',\n                      buttons: {\n                          left: ['cancel'],\n                          right: []\n                      }\n                  }, true);\n              }\n          }, {\n              text: 'Done',\n              className: 'success',\n              action: function () {\n                  Popup.alert('Done');\n\n                  /** Close this popup. Close will always close the current visible one, if one is visible */\n                  Popup.close();\n              }\n          }]\n      }\n  })\n    }\n\n  findParking = (input)=>{\n    Geocode.fromAddress(input).then(\n  response => {\n    const locationObject = response.results[0].geometry.location;\n    console.log(\"locationObject\",locationObject);\n    this.addAddress(locationObject)\n    locationObject.fromRentee = true;\n    locationObject.address = input\n    locationObject.currentLocation = this.props.currentLocation\n    this.socket.emit('client:message', locationObject)\n\n  },\n  error => {\n    console.error(error);\n  }\n);\n  }\nrender(){\n  console.log(this.state.distance);\n  return (\n      <div className=\"home-container\">\n      <header className='header'>\n            <div className=\"header__logo-box\">\n            </div>\n            <div className=\"header__text-box\">\n              <h1 className=\"heading-primary\">\n                <span className=\"heading-primary--main\">Open Spaces</span>\n                <span className=\"heading-primary--sub\">Find Parking</span>\n              </h1>\n              <SearchBar findParking={this.findParking}/>\n            </div>\n            <br/>\n            </header>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(Home);\n"]},"metadata":{},"sourceType":"module"}